type Query {
  users(query: String): [User!]!
  posts(query: String): [Post!]!
  comments: [Comment!]!
  me: User!
  post: Post!
  chatbox(me: String, friend: String): ChatBox!
}

type Mutation {
  createUser(data: CreateUserInput!): User!
  createChatBox(data: CreateBoxInput!): ChatBox!
  addMessage(me: String, friend: String): Message!
}

type Subscription {
  comment(postId: ID!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
  chatbox(boxId: ID!): ChatboxSubscriptionPayload!
  message(me: String!, friend: String!, msg: String!): MsgSubscriptionPayload!
}

input CreateUserInput {
  name: String!
  email: String!
  age: Int
}

input CreateBoxInput {
  me: String!
  friend: String!
}
input UpdateUserInput {
  name: String
  email: String
  age: Int
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  author: ID!
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

input CreateCommentInput {
  text: String!
  author: ID!
  post: ID!
}

input UpdateCommentInput {
  text: String
}

type User {
  id: ID!
  name: String!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  data: Comment!
}

type ChatboxSubscriptionPayload {
  data: ChatBox!
}

type MsgSubscriptionPayload {
  data: Message!
}

type ChatBox {
  id: ID!
  name: String
  messages: [Message!]
}

type Message {
  id: ID!
  sender: User!
  body: String!
}
